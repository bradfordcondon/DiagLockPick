#!/usr/bin/env perl
#Random locus generator, version two.
#Takes a BLAST file of reference loci vs all genomes.
#Filters out results not found in all genomes.
#outputs results for each input query as individual FASTA files.

use strict;
use warnings;
use Getopt::Long;
use Bio::SeqIO;
use Bio::searchIO;
use List::Util 'shuffle';
use Data::Dumper;



#global values
my $input_file;
my %hash;
my %nohit;
my %allhash;
my @loci_list;
my $evalcutoff;
my $runMode;
my $output_number;
my $loci_per_package;
my $lengthCutOff;
my %noFilter;


#read user options
GetOptions(
	"i=s"	=> \$input_file,
	"e=s"  => \$evalcutoff,
	"m=s" => \$runMode,
	"o=s" => \$output_number,
	"l=s" => \$lengthCutOff
);

#set default eval
if (!$evalcutoff){
	print "no -e evalue cutoff set.  Using default of .001\n";
	$evalcutoff = .001;
}
if (!$runMode ) {
	print "no -m runmode set, using default random.\n Options are random for sets of random loci and all for all loci seperately.";
	$runMode = "random";
}

if ($runMode ne 'random' && $runMode ne 'all'){
print 'invalid -m option.  Valid options are "all" and "random" with no default.';
die;
}

if (!$output_number && $runMode eq 'random'){
	print "no output number or loci per set selected for random mode.  Using default = 10000\n";
	$output_number = 10000;
}

if (!$loci_per_package && $runMode eq 'random'){
	print "no loci per set selected for random mode.  Using default =  10\n";
	$loci_per_package = 10;
}

if (!$lengthCutOff){
	print "no -l length cutoff set.  Using default = 300\n";
	$lengthCutOff=300;
}

#Open BLAST report.
print "reading BLAST report... \n";
##screen out sequences with more than 1 hit above a certain threshhold
my $input3 = Bio::SearchIO->new (-file => "<$input_file", '-format' => 'blast')
	or die "error: failure opening fasta $input_file for reading: $!\n";
			#First, if its blank in any taxon, add it to the skip list.
while ( my $result = $input3->next_result ){
				my $database = $result->database_name;
				my $qname = $result->query_name;
				 $noFilter{$qname} = '1';
	if ( $database =~  /DSLIZ/i ||$database =~  /BR29/i || $database =~  /BGL/i   ) {  # Ignore certain databases.
									}
		else {
		if (!defined $result->next_hit) {
						$nohit{$qname} = 1;
					}
			else {
    				while (my $hit = $result->next_hit){
						my $blastname = $hit->name;
    						my $goodhitcount = 0;
    						my $count = 0;  #counter for all hits.  
				    	while (my $hsp = $hit->next_hsp){
 							my $eval = $hsp->evalue;
 							my $length = $hsp->length('total');
				    		$count++;
    							if ( $length >= $lengthCutOff) { 
    						$goodhitcount++;
    					my $blastseq = $hsp->hit_string;
						my $blaststart =  $hsp->start('hit');
						my $blastend  = $hsp->end('hit');																		
						my $sequence = $hsp->hit_string;
						my $id = $database.$blastname;
						 my $identity = $hsp->percent_identity;
    					$hash{$qname}{$database} = $sequence;
    								if ($goodhitcount >=2 ) {  ##if theres more than one good hit
	    								$nohit{$qname} = 1;
    								}
    							}
    							
						}	
						if ($goodhitcount ==0){
	    								$nohit{$qname} = 1; #if theres no hits matching criteria

    								}
					}
			}
		}
}
$input3->close();

###Build a list of loci to use, but leave out those added to the exclusion hash
foreach my $k (keys %hash) {   		
         if (exists $nohit{$k}) {  
    		}
               else {
					push (@loci_list, $k);
					}
}

##tell user how many loci were screened
print scalar(keys %noFilter), " BLAST results screened.\n" ;
print "Number of loci matching length and eval criteria for at least 1 strain: ", scalar(keys %hash), ".\n";
print "Number of loci matching criteria for all strains: ", scalar @loci_list , ".\n";


if (scalar @loci_list == 0){
	print "no loci left with selected parameters.  Please reduce stringency and try again.\n";
	die;
}

if (scalar @loci_list < $loci_per_package ){
	print "WARNING: fewer loci meeting criteria than requested loci per package.  Please reduce stringency and try again.\n";
die;
}

if ($runMode eq "random"){
my $p = 1;#p is locus set tracker. 
	while ($p <= $output_number){  #loop until output matches number requested
		my $i = 1;  #set locus counter to zero	
		my @shuffled = shuffle(@loci_list);
		##Generate names for this shuffled iteration
		my @names = @shuffled[1..$loci_per_package];
		my $namefile= join "_", @names;  
		 $namefile =~ s/scaffold/s/g;
		my %subloci;
		#open new file for this set
		my $output_file = "sequences/$namefile.fasta";
	open( OUT, ">$output_file" )
	or die "error: cannot open $output_file for writing: $!\n";		
		#start loop of first elements
		while ($i <$loci_per_package){
		my $id = shift @shuffled;
		###Go through all of the keys for that  locus ID
			foreach my $db (keys $hash{$id}) {
				my $seq = $hash{$id}{$db};
				$subloci{$db}{$id}= $seq;  ##build a mini hash, by database, for each set of loci
			}
		$i++;
		}
		##Now that we have i loci in our subhash, print it out in its own file, sorted by database


					foreach my $db2 (sort keys %subloci) {  ##sort to ensure keys come out in same order
 
 			print OUT ">$db2\n";  ##print new header for this strain
						foreach my $locus2 (sort keys $subloci{$db2}) {
								my $seqfinal = $subloci{$db2}{$locus2};
							print OUT "$seqfinal";
							}
						print OUT "\n";
					}
		close OUT;
		$p++;
	}
}
if ($runMode eq "all"){
foreach my $locus (@loci_list){  ##print FASTA from each genome to its own folder
	my $namefile = $locus;
	$namefile =~ s/scaffold/s/g; #remove 'scaffold' from name file
	my $output_file = "sequences/$namefile.fasta";
	open( OUT, ">$output_file" ) or die "error: cannot open $output_file for writing: $!\n";
	foreach my $database (sort keys %allhash) {  
		my $seqfinal = $allhash{$database}{$locus};
		print  OUT ">$database\n$seqfinal\n";
		}			
}
close OUT;
}

