#!/usr/bin/env perl
#Random locus generator, version two.
#Takes a BLAST file of reference loci vs all genomes.
#Filters out results not found in all genomes.
#Outputs x random sets of y loci.

use strict;
use warnings;
use Getopt::Long;
use Bio::SeqIO;
use Bio::searchIO;
use List::Util 'shuffle';
use Data::Dumper;



#global values
my $input_file;
my %hash;
my %nohit;
my %allhash;
my @loci_list;
my $output_number = 10;
my $loci_per_package = 10;

#read user options
GetOptions(
	"i=s"	=> \$input_file,
);

mkdir "sequences";

my $input = Bio::SearchIO->new (-file => "<$input_file", '-format' => 'blast')#Open BLAST report.
	or die "error: failure opening fasta $input_file for reading: $!\n";


while ( my $result = $input->next_result ){##generate list of loci to ignore because they are not present in all genomes
	if (!defined $result->next_hit) {  ##REPLACE WITH MORE UP TO DATE VERSION
		my $database = $result->database_name;
		if ( $database !~  'DsLIZ_masked.fasta') {
			if ( $database !~  'DSLiz'){
		$nohit{$result->query_name} = 1;
			}
    	}
    }
	}

$input->close();

###
###Reopen blast file, and build database of loci to include


my $input2 = Bio::SearchIO->new (-file => "<$input_file", '-format' => 'blast')
	or die "error: failure opening fasta $input_file for reading: $!\n";

my %genome_tracker;

# step through sequences in input blast file
while ( my $result = $input2->next_result ){
		my $database = $result->database_name;
				my $qname = $result->query_name;

					my $count = 0;

			while (my $hit = $result->next_hit){


				my $blastname = $hit->name;	


				while (my $hsp = $hit->next_hsp){
										$count++;

						if ($count ==1) {

						$genome_tracker{$qname}++;  #track the number of genomes included

						my $blastseq = $hsp->hit_string;
						my $blaststart =  $hsp->start('hit');
						my $blastend  = $hsp->end('hit');																		
						my $sequence = $hsp->hit_string;
					
						my $id = $database.$blastname;
						my $length = $hsp->length('total');

						if ($length > 350) {



							$hash{$qname}{$database} = $sequence;
							$allhash{$database}{$qname} = $sequence;

						}
							}
				}
			}

}
		
	
	###Build a list of loci to shuffle, but leave out those not found in at least 1 genome except DSLiz!!
	foreach my $k (keys %hash) {   		
            if (exists $nohit{$k}) {  
       		}
                  else {
						push (@loci_list, $k);
						}
		}
	


#					print Dumper(\%nohit);


###Print loci list to a separate file

my $loci_file = "loci_list.txt";
	open( OUT, ">$loci_file" )
	or die "error: cannot open $loci_file for writing: $!\n";

foreach (@loci_list) {
	print OUT "$_\n";
}


close OUT;


#$allhash{$database}{$qname} = $sequence;

##delete both DSliz
	foreach my $k (keys %hash) {   
		foreach my $k2 (keys $hash{$k}) {

			if (($k2 =~  'DsLIZ_masked.fasta') || ($k2 =~  'DSLiz') )  {
				 delete  $hash{$k}{$k2} ;
				 delete  $allhash{$k2}{$k} ;

			}
		

		}

	}


#####
#####generate sets of random loci
#####

my $p = 1;

	while ($p <= $output_number){

##For each set, shuffle the array of loci, and take hte last 10.  print those to its own file.
		my $i = 1;  #set counter to zero	
		my @shuffled = shuffle(@loci_list);
		#ok both my loci_list and shuffled are busted.  why?

##generate file name from first X elements
		###
		my @names = @shuffled[1..$loci_per_package];
		my $namefile= join "_", @names;   #also error here
		 $namefile =~ s/scaffold/s/g;


		my %subloci;
		#open new file for this set
		my $output_file = "sequences/$namefile.fasta";
	open( OUT, ">$output_file" )
	or die "error: cannot open $output_file for writing: $!\n";

		#start new hash for each locus_set
		
		#start loop of first elements
		while ($i <$loci_per_package){
		my $id = shift @shuffled;


		###Go through all of the keys for that  locus ID
			#error is here
			foreach my $db (keys $hash{$id}) {

				my $seq = $hash{$id}{$db};
				$subloci{$db}{$id}= $seq;  ##build a mini hash, by database, for each set of loci

			}
		$i++;
	
		}
		##Now that we have i loci in our subhash, print it out in its own file, sorted by database

					foreach my $db2 (sort keys %subloci) {  ##sort to ensure keys come out in same order
 
 			print OUT ">$db2\n";  ##print new header for this strain

						foreach my $locus2 (sort keys $subloci{$db2}) {
								my $seqfinal = $subloci{$db2}{$locus2};
							print OUT "$seqfinal";

							}
						print OUT "\n";
					}

		$p++;

	}

close OUT;


	###
	###finally, print out an "all loci" set, just in case

#						$allhash{$database}{$qname} = $sequence;

my $mega_print = 'FALSE';
if ($mega_print eq 'TRUE'){
my $mega = "all_loci.fasta";
	open( OUT, ">$mega" );

		foreach my $db (sort keys %allhash) {  ##sort to ensure keys come out in same order
 


 			print OUT ">$db\n";  ##print new header for this strain


						foreach my $locus (sort keys $allhash{$db}) {
							 if (!exists $nohit{$locus} ){

								my $seqfinal = $allhash{$db}{$locus};
							print OUT "$seqfinal";
							}
						}
						print OUT "\n";
					}



	}

