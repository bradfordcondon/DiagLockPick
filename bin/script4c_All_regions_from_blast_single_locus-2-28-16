#!/usr/bin/env perl
#Random locus generator, version two.
#Takes a BLAST file of reference loci vs all genomes.
#Filters out results not found in all genomes.
#outputs results for each input query as individual FASTA files.

use strict;
use warnings;
use Getopt::Long;
use Bio::SeqIO;
use Bio::searchIO;
use List::Util 'shuffle';
use Data::Dumper;



#global values
my $input_file;
my %hash;
my %nohit;
my %allhash;
my @loci_list;

#read user options
GetOptions(
	"i=s"	=> \$input_file,
);



#Open BLAST report.

my $input = Bio::SearchIO->new (-file => "<$input_file", '-format' => 'blast')
	or die "error: failure opening fasta $input_file for reading: $!\n";

##generate list of loci to ignore because they are not present in all genomes

while ( my $result = $input->next_result ){
	if (!defined $result->next_hit) {
		my $database = $result->database_name;
		if ( $database !~  'DsLIZ_masked.fasta') {
			if ( $database !~  'DSLiz'){
	#	print "screening out $database\n";
		$nohit{$result->query_name} = 1;
			}
    	}
    }

}
$input->close();

my $input3 = Bio::SearchIO->new (-file => "<$input_file", '-format' => 'blast')
	or die "error: failure opening fasta $input_file for reading: $!\n";

    ###But if it does have hits...
while ( my $result = $input3->next_result ){
    				while (my $hit = $result->next_hit){

    	#want to cycle through and add it to the nohit database IF IT HAS MULTIPLE HITS ABOVE A CERTAIN THRESHHOLD.
    					my $goodhitcount = 0;
				    	while (my $hsp = $hit->next_hsp){

 							#my $length = $hsp->length('total');
 							#my $identity = $hsp->percent_identity;
 							my $eval = $hsp->evalue;
    							if ( $eval <= 2e-100) {  #define a good hit as being longer than 900bp and 80% identical. 
    													# This assumes query of 1kb
    								$goodhitcount++;
    							}
 
    					}

    					if ($goodhitcount >=2 ) {  ##if theres more than one good hit
    					$nohit{$result->query_name} = 1;
    					}
    				}

	}	

$input3->close();


###
###Reopen blast file, and build database of loci to include


my $input2 = Bio::SearchIO->new (-file => "<$input_file", '-format' => 'blast')
	or die "error: failure opening fasta $input_file for reading: $!\n";

# step through sequences in input blast file
while ( my $result = $input2->next_result ){
		my $database = $result->database_name;
	
	#if (($database !~ /DsLIZ_masked/) || ($database !~  /DSLiz/) )  {

					my $count = 0;   ###no count mechanism?

			while (my $hit = $result->next_hit){


				my $blastname = $hit->name;	
				my $qname = $result->query_name;


				while (my $hsp = $hit->next_hsp){
										$count++;

						if ($count ==1) {

				
						my $blastseq = $hsp->hit_string;
						my $blaststart =  $hsp->start('hit');
						my $blastend  = $hsp->end('hit');																		
						my $sequence = $hsp->hit_string;
						my $length = $hsp->length('total');
						my $eval = $hsp->evalue;

						my $id = $database.$blastname;
						 my $identity = $hsp->percent_identity;

						if ( $eval <= 2e-100) {
							if ($length >= 900 ){


						$hash{$qname}{$database} = $sequence;
						$allhash{$database}{$qname} = $sequence;
							}
						}
							}
				}
			}

}
		



	
	###Build a list of loci to shuffle, but leave out those not found in at least 1 genome except DSLiz!!
	foreach my $k (keys %hash) {   		
            if (exists $nohit{$k}) {  
            	print "ignoring $k: not present in all genomes or found as multiple copies!\n";
       		}
                  else {
						push (@loci_list, $k);
						}
		}
	

###Print loci list to a separate file

my $loci_file = "loci_list.txt";
	open( OUT, ">$loci_file" )
	or die "error: cannot open $loci_file for writing: $!\n";

foreach (@loci_list) {
	print OUT "$_\n";
}


close OUT;


#$allhash{$database}{$qname} = $sequence;

##delete both DSliz
	foreach my $k (keys %hash) {   
		foreach my $k2 (keys $hash{$k}) {

			if (($k2 =~  'DsLIZ_masked.fasta') || ($k2 =~  'DSLiz') )  {
				 delete  $hash{$k}{$k2} ;
				 delete  $allhash{$k2}{$k} ;

			}
		

		}

	}


	my $output_file = "sequences/all_1kb.fasta";

	open( OUT, ">$output_file" )
	or die "error: cannot open $output_file for writing: $!\n";

		foreach my $database (sort keys %allhash) {  
			print OUT "\n>$database\n";
				foreach my $locus (sort keys $allhash{$database}) {


						my $seqfinal = $allhash{$database}{$locus};

						unless (exists $nohit{$locus}) {
						print  OUT "$seqfinal";
					}
				}
			}
		
	
 

	

